# MAIN LOOP
2 -> main_loop_cutoff
0 -> loop_counter
0 -> num_successful_measurements

# Define the input Hamiltonian 
2 -> num_qubits
1 -> num_terms
3 -> paulis.[1]
3 -> paulis.[2]
1 -> coeff.[1]

# See Eq. 254 in https://arxiv.org/pdf/2303.11962.pdf
0.451027 -> theta
0 -> phi

gosub initialization
x[sys_qubits.[1]]
repeat
    gosub weak_measurement
    gosub measurement_outcome_processing
    if ~total_measurement_success
        gosub recovery_operation
    end
    if total_measurement_success
        num_successful_measurements + 1 -> num_successful_measurements
    end
    loop_counter + 1 -> loop_counter
    loop_counter == main_loop_cutoff -> stop_cond
until stop_cond

# Trotter Weak Measurement
sub weak_measurement
    # TODO this shit wrong, term_idx should only go up to num_terms.
    1 -> measurement_outcome_idx
    1 -> term_idx
    # Go up in term index for second order trotter
    increment placeholder to num_terms
        gosub weak_measurement_term
        term_idx + 1 -> term_idx
        measurement_outcome_idx + 1 -> measurement_outcome_idx
    next
    
    # go down in term index for second order trotter
    increment placeholder to num_terms
        gosub weak_measurement_term
        term_idx - 1 -> term_idx
        measurement_outcome_idx + 1 -> measurement_outcome_idx
    next
endsub

sub basis_change
    increment qubit_idx to num_qubits
        qubit_idx + (num_qubits * (term_idx-1)) -> total_idx
        paulis.[total_idx] -> cur_pauli
        # If cur_pauli is 0 AKA Identity then we do not change this qubit basis
        
        # If cur_pauli is 1 AKA X then change basis using H
        cur_pauli == 1 -> cur_pauli_cond
        if cur_pauli_cond
            h[sys_qubits.[qubit_idx]]
        end
        # If cur_pauli is 2 AKA Y then change basis using SH (eq. 255)
        cur_pauli == 2 -> cur_pauli_cond
        if cur_pauli_cond
            sd[sys_qubits.[qubit_idx]]
            h[sys_qubits.[qubit_idx]]
        end
        # If cur_pauli is 3 AKA Z then we do not change this qubit basis
    next
endsub

sub basis_change_inv
    increment qubit_idx to num_qubits
        qubit_idx + (num_qubits * (term_idx-1)) -> total_idx
        paulis.[total_idx] -> cur_pauli
        # If cur_pauli is 0 AKA Identity then we do not change this qubit basis
        
        # If cur_pauli is 1 AKA X then change basis using H
        cur_pauli == 1 -> cur_pauli_cond
        if cur_pauli_cond
            h[sys_qubits.[qubit_idx]]
        end
        # If cur_pauli is 2 AKA Y then change basis using SH (eq. 255)
        cur_pauli == 2 -> cur_pauli_cond
        if cur_pauli_cond
            h[sys_qubits.[qubit_idx]]
            s[sys_qubits.[qubit_idx]]
        end
        # If cur_pauli is 3 AKA Z then we do not change this qubit basis
    next
endsub

sub weak_measurement_term
    phi -> angle_1
    (phi - theta) / 2 -> angle_2
    (theta - phi) / 2 -> angle_3
    # first ancilla rotation
    ry(angle_1)[ancilla]
    
    # change basis
    gosub basis_change
    
    # First round of cnots
    increment control_qubit to num_qubits
        cnot[sys_qubits.[control_qubit], ancilla]
    next
    
    # second rotation
    ry(angle_2)[ancilla]
    
    # second round of cnots
    increment control_qubit to num_qubits
        num_qubits + 1 -> a
        a - control_qubit -> cnot_control_idx
        cnot[sys_qubits.[cnot_control_idx], ancilla]
    next
    
    # third rotation
    ry(angle_3)[ancilla]
    
    # change basis back
    gosub basis_change_inv
    
    measure[ancilla] -> tmp 
    tmp -> measurement_outcomes.[measurement_outcome_idx]
endsub

sub initialization
    0.1 -> epsilon
    qubit -> ancilla

    increment qubit_idx to num_qubits
        qubit -> sys_qubits.[qubit_idx]
    next
    
    # Storage for measurement outcomes
    2 * num_terms -> num_terms_new 
    increment idx to num_terms_new
        0 -> measurement_outcomes.[idx]
    next
    
endsub

sub measurement_outcome_processing
    0 -> total_measurement_success
    2 * num_terms -> num_terms_new 
    increment processing_idx to num_terms_new
        measurement_outcomes.[processing_idx] -> tmp
        total_measurement_success + tmp -> total_measurement_success
    next
endsub

sub recovery_operation
    # do nothing rn
endsub
